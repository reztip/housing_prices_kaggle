names(faithful)
ggplot(faithful, aes(erruptions, waiting)) + geom_point()
ggplot(faithful, aes(eruptions, waiting)) + geom_point()
cuve
curve
surve(sin, -pi, pi)
curve(sin, -pi, pi)
LIBRARY(GGPLOT2)
library(ggplot2)
names(mpg)
library(graphics)
x = c(1,2,3)
y = c(3,2,1)
plot(x,y)
plot(x,y) + title("A Title!")
df = data.frame( x= x, y = y)
df
plot(x = df$x, y = df$y)
qplot(x = x, y = y, data = df)
qplot(x = x, y = y, data = df, main =
"PLot Title")
len
ggplot(eruptions)
library(ggplot2)
names(eruptions)
eruprtion
names(faithful)
ggplot(faithful, aes(eruptions, len)) + geom_point()
ggplot(faithful, aes(eruptions, y = ..count..)) + geom_point()
288
CHAPTER 9.  DATA VISUALIZATION
around 1.5 minutes. It also appears that the order in which the dataframe rows
are stored is not related to the eruption variable.
9.5  Histograms
An alternative way to graph one dimensional numeric data is using the histogram
graph. The histogram divides the range of numeric values into bins and displays
the number of data values falling within each bin. The width of the bins influences
the level of detail. Very narrow bins maintain all the information present in the
data but are hard to draw conclusions from, as the histogram becomes equivalent
to a sorted list of data values. Very wide bins lose information due to overly
aggressive smoothing. A good bin width balances information loss with useful
data aggregation. Unlike strip plots that contain all of the information present in
the data, histograms discard the ordering of the data points, and treat samples
in the same bin as identical.
The
hist(data, breaks = num
bins)
function within the graphics pack-
age can be used to display a histogram. The
xlab
,
ylab
, and
main
parameters
described in Section 9.4 can be added as optional parameters to
hist
.See
help(hist)
for more details on the di
↵
erent parameters, and in particular for
assistance on controlling the bin widths. For example, the code below displays a
histogram of eruption times of Old Faithful using 20 bins.
hist(faithful$eruptions,
breaks = 20,
xlab = "eruption times (min)",
ylab = "count",
main = "")
qplot(x = eruptions, data = faithful, bins = 3)
qplot(x = eruptions, data = faithful, bins = 15)
qplot(x = eruptions, data = faithful, bins = 15, main = "Eruption Duration")
S = sort.int(mpg$cty)
S
S = sort.int(mpg$cty, index.return =  T)
S
mpg$cty[S]
mpg$cty[S,]
mpg$cty[S]
S
mpg$cty[S$ix]
lot(S$x,
type = "l",
lty = 2,
xlab = "sample number (sorted by city mpg)",
ylab = "mpg")
# add dashed line of hwy mpg
lines(mpg$hwy[S$ix] ,lty = 1)
legend("topleft", c("highway mpg", "city mpg"), lty = c(1, 2))
plot(S$x,
type = "l",
lty = 2,
xlab = "sample number (sorted by city mpg)",
ylab = "mpg")
# add dashed line of hwy mpg
lines(mpg$hwy[S$ix] ,lty = 1)
legend("topleft", c("highway mpg", "city mpg"), lty = c(1, 2))
x = seq(-2, 2, length.out = 30)
y = x^2
qplot(x, y, geom = "line")
qplot(x, y, geom = c("line", "point"))
qplot(x, y, geom = c("line", "point"), size = x)
qplot(x, y, geom = c("line", "point"), size = y/x)
qplot(x, y, geom = c("line", "point"), size = x/y)
x.grid = seq(03, 3, length.out = 100)
x
x.gr
x.grid
x.grid = seq(-3, 3, length.out = 100)
x.grid
K1 = functino(x) {}
K1 = function(x) {
ind = abs(x) > 1
x = x * 0 + 1/2
x[ind] = 0
return (x)
}
K1(3)
K1(c(0,1,1,-1,.5))
K2 = function(x) {
ind = abs(x) > 1
x = 1 - abs(x)
x[ind] = 0
return(x)
}
K3 = function(x) dnorm(x)
K4 = function(x) {
ind = abs(x) > 1
x = (1 - abs(x)ˆ3)ˆ3
x[ind] = 0
return(x)
}
K4 = function(x) {
ind = abs(x) > 1
x = (1 - abs(x)ˆ3)ˆ3
x[ind] = 0
return(x)
}
K4 = function(x) {
ind = abs(x) > 1
x = (1 - abs(x)ˆ3)ˆ3
x[ind] = 0
return(x)
}
K4 = function(x) {
ind = abs(x) > 1
x = (1 - abs(x)ˆ3)ˆ3
x[ind] = 0
return(x)
}
K4 = function(x) {
ind = abs(x) > 1
x = (1 - abs(x)ˆ3)ˆ3
x[ind] = 0
return(x)}
K4 = function(x) {
ind = abs(x) > 1
x = (1 - abs(x) ^3) ^3
x[ind] = 0
return(x)
}
R = stack(list('uniform' = K1(x_grid),
'triangular' = K2(x_grid),
'gaussian' = K3(x_grid),
'tricube' = K4(x_grid),
'uniform' = K1(x_grid / 2) / 2,
'triangular' = K2(x_grid / 2) / 2,
'gaussian' = K3(x_grid / 2) / 2,
'tricube' = K4(x_grid / 2) / 2))
R = stack(list('uniform' = K1(x.grid),
'triangular' = K2(x.grid),
'gaussian' = K3(x.grid),
'tricube' = K4(x.grid),
'uniform' = K1(x.grid / 2) / 2,
'triangular' = K2(x.grid / 2) / 2,
'gaussian' = K3(x.grid / 2) / 2,
'tricube' = K4(x.grid / 2) / 2))
R
R
head(R)
names(R) = c('kernel.value', 'kernel.type')
R$x = x.grid
R$h[1:400] = '$h=1$'
R$h[401:800] = '$h=2$'
head(R)
qplot(x,
kernel.value,
data = R,
facets = kernel.type ̃h,
geom = "line",
xlab = "$x$",
ylab = "$K_h(x)$")
qplot(x,
kernel.value,      data = R,      facets = kernel.type ̃h,      geom = "line",      xlab = "$x ,ylab = "$K_h(x)$")
qplot(x,)
x
qplot(x, kernel.value, data = R)
qplot(x, kernel.value, data = R, facets = kernel.type ~ h)
qplot(x, kernel.value, data = R, facets = kernel.type ~ h, geom = "line'")
qplot(x, kernel.value, data = R, facets = kernel.type ~ h, geom = "line'")
qplot(x, kernel.value, data = R, facets = kernel.type ~ h, geom = "line")
qplot(x, kernel.value, data = R, facets = kernel.type ~ h, geom = "line", xlab="$x$")
library(latex2exp)
qplot(x, kernel.value, data = R, facets = kernel.type ~ h, geom = "line", xlab=TeX("$x$"))
ggplot(faithful, aes(eruptions)) + geom_density(adjust = 2)
ggplot(faithful, aes(eruptions)) + geom_density(adjust = 3)
ggplot(faithful, aes(eruptions)) + geom_density(adjust = .5)
ggplot(faithful, aes(eruptions)) + geom_density(adjust = .5, kernel = "tricube")
ggplot(faithful, aes(eruptions)) + geom_density(adjust = .5, kernel = "triangular")
ggplot(faithful, aes(eruptions)) + geom_density(adjust = .5, kernel = "rectangular")
ggplot(faithful, aes(eruptions)) + geom_density(adjust = c(.5, 1))
ggplot(faithful, waiting, eruptions) + geom_hex()
ggplot(faithful, aes(waiting, eruptions)) + geom_hex()
9.8.  SCATTER PLOTS
307
plot(mtcars$hp,
mtcars$mpg,
pch = mtcars$am,
xlab = "horsepower",
cex = 1.2)
9.8.  SCATTER PLOTS
307
plot(mtcars$hp,
mtcars$mpg,
pch = mtcars$am,
xlab = "horsepower",
cex = 5)
9.8.  SCATTER PLOTS
307
plot(mtcars$hp,
mtcars$mpg,
pch = mtcars$am,
xlab = "horsepower",
cex = 1.2)
qplot(disp,
mpg,
data = mtcars,
main = "MPG vs Eng. Displacement") +
stat_smooth(method = "loess",
method.args = list(degree = 0),
span = 0.2,
se = FALSE)
qplot(disp,
mpg,
data = mtcars,
main = "MPG vs Eng. Displacement") +
stat_smooth(method = "loess",
method.args = list(degree = 1),
span = 0.2,
se = FALSE)
qplot(disp,
mpg,
data = mtcars,
main = "MPG vs Eng. Displacement") +
stat_smooth(method = "loess",
method.args = list(degree = 0),
span = 0.2,
se = FALSE)
qplot(disp,
mpg,
data = mtcars,
main = "MPG vs Eng. Displacement") +
stat_smooth(method = "loess",
method.args = list(degree = 1),
span = 0.2,
se = FALSE)
qplot(disp,
mpg,
data = mtcars,
main = "MPG vs Eng. Displacement") +
stat_smooth(method = "loess",
method.args = list(degree = 0),
span = 0.2,
se = FALSE)
qplot(disp,
mpg,
data = mtcars,
main = "MPG vs Eng. Displacement") +
stat_smooth(method = "loess",
method.args = list(degree = 0),
span = 0.4,
se = FALSE)
qplot(disp,
mpg,
data = mtcars,
main = "MPG vs Eng. Displacement") +
stat_smooth(method = "loess",
method.args = list(degree = 0),
span = 0.1,
se = FALSE)
qplot(disp,
mpg,
data = mtcars,
main = "MPG vs Eng. Displacement") +
stat_smooth(method = "loess",
method.args = list(degree = 0),
span = 0.3,
se = FALSE)
x_grid = seq(-1, 1, length= 100)
y_grid = x_grid
R = expand.grid(x_grid, y_grid)
R
nrow(R)
head(x)
head(R)
names(R) = c("x", "y")
R$z = R$x^2 + R$y^2
head(R)
ggplot(R, aes(x,y, z = z)) + stat_contour()
ggplot(mpg, aes("",hwy)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("")
ggplot(mpg, aes("",hwy)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete()
ggplot(mpg, aes(NULL
,hwy)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete()
ggplot(mpg, aes("",hwy)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete()
ggplot(mpg, aes(y = hwy)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete()
ggplot(mpg, aes("",hwy)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete()
ggplot(mpg, aes("",hwy)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("")
reorder()
reorder(mpg, hwy)
reorder(mpg, mpg$hwy)
reorder(mpg, mpg$hwy, median)
?reorder
reorder(mpg$manufacturer, mpg$hwy, median)
ggplot(mpg, aes(reorder(class, -hwy, median), hwy)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("class")
?rnorm
?aes
?stat_qq
lm(s = 2)
df
ls()
library(ggplot2)
lm(price ~ carat, diamonds, s = 9)
p = lm(price ~ carat, diamonds)
p
predict(p, 6, s = 0)
predict(p, 6,)
predict(p, 60)
ls()
?predict
predict(p, newdata = 6)
predict(p, newdata = 6, s= 0)
predict(p, newdata = data.frame(carat = 6), s= 0)
predict(p, newdata = data.frame(carat = 6))
predict(alpha = 0)
?predict
?predict
dframe = data.frame(x = c(1,2), y = c(3,4), z = c(5,6))
dframe
dframe
dframe[[1]]
dframe[1]
typeof(dframe[1])
ggplot
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(knitr)
library(reshape2)
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(knitr)
library(reshape2)
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(knitr)
library(reshape2)
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(knitr)
library(reshape2)
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(knitr)
library(reshape2)
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(knitr)
library(reshape2)
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(knitr)
library(reshape2)
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(knitr)
library(reshape2)
root = ".."
data.path  =  file.path(root, "input", "train.csv")
train.df = read.csv(data.path, header = TRUE)
root = ".."
data.path  =  file.path(root, "input", "train.csv")
train.df = read.csv(data.path, header = TRUE)
setwd("~Desktop/")
setwd("Desktop/")
dir()
setwd("kaggle")
dir()
setwd("house_prices")
dir()
setwd("source")
dir()
getwd()
setwd("/home/reztip/Desktop/kaggle/house_prices/source")
root = ".."
data.path  =  file.path(root, "input", "train.csv")
train.df = read.csv(data.path, header = TRUE)
house.ids = select(train.df, Id)
house.prices = select(train.df, SalePrice)
# Drop the id from training
train.df = select(train.df, -Id)
# How many variables we have for training
length(names(train.df)) - 1
nrow(train.df)
colwise(is.numeric)(train.df) %>% data.frame %>%
melt(id = "SalePrice") %>% select(variable, value)
colwise(is.numeric)(train.df) %>% unlist %>% sum
unlist(colwise(function(x) sum(is.na(x)))(train.df)) %>% sort(decreasing = T)
train.df = select(train.df, -PoolQC, -MiscFeature, -Alley, -Fence)
nas.meaningful = c("FireplaceQu", "GarageType", "GarageYrBlt", "GarageFinish",
"GarageQual", "GarageCond", "BsmtExposure", "BsmtFinType2",
"BsmtQual", "BsmtCond", "BsmtFinType1")
nas.not.meaningful = c("LotFrontage", "MasVnrType", "MasVnrArea", "Electrical")
vect  = as.character(train.df[var])
for( var in nas.meaningful){
vect  = as.character(train.df[var])
vect[is.na(vect)] = sort(table(vect), decreasing = T)[[1]]
train.df[var] = as.factor(vect)
}
for( var in nas.meaningful){
vect  = as.character(train.df[var])
vect[is.na(vect)] = sort(table(vect), decreasing = T)[[1]]
train.df[var] = as.factor(vect)
}
for(var in nas.not.meaningful){
vect  = train.df[var]
if(! is.numeric(vect)){
vect = as.character(vect)
vect[is.na(vect)] = sort(table(vect), decreasing = T)[[1]]
train.df[var] = as.factor(vect)
}
else {
vect[is.na(vect)] = median(vect, na.rm = T)
train.df[ var] = vect
}
}
train.df$MSSubClass = as.factor(train.df$MSSubClass)
train.df$OverallQual = as.factor(train.df$OverallQual)
train.df$OverallCond = as.factor(train.df$OverallCond)
train.df = na.omit(train.df)
ggplot(train.df,
aes(SalePrice, y = ..density.., fill = I("floralwhite"))) +
geom_histogram(bins = 30, color = 'black') +
scale_x_continuous(labels = scales::dollar_format()) +
labs(title = "Distribution of Home Selling Prices")
ggplot(train.df,
aes(SalePrice, y = ..density.., fill = I("floralwhite"))) +
geom_histogram(bins = 30, color = 'black') +
scale_x_log10(labels = scales::dollar_format(),
breaks = c(.5E5, 1E5, 2E5, 5E5)) +
labs(title = "Distribution of Home Selling Prices (Log-Scaled)")
lm(SalePrice ~ ., train.df)
summary(train.df)
str(train.df)
for( var in nas.meaningful){
vect  = as.character(train.df[var])
vect[is.na(vect)] = sort(table(vect), decreasing = T)[[1]]
train.df[var] = as.factor(vect)
}
vect
va
var
train.df[var]
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(knitr)
library(reshape2)
setwd("/home/reztip/Desktop/kaggle/house_prices/source")
root = ".."
data.path  =  file.path(root, "input", "train.csv")
train.df = read.csv(data.path, header = TRUE)
