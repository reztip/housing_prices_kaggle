ind = abs(x) > 1
x = (1 - abs(x)ˆ3)ˆ3
x[ind] = 0
return(x)
}
K4 = function(x) {
ind = abs(x) > 1
x = (1 - abs(x)ˆ3)ˆ3
x[ind] = 0
return(x)
}
K4 = function(x) {
ind = abs(x) > 1
x = (1 - abs(x)ˆ3)ˆ3
x[ind] = 0
return(x)
}
K4 = function(x) {
ind = abs(x) > 1
x = (1 - abs(x)ˆ3)ˆ3
x[ind] = 0
return(x)}
K4 = function(x) {
ind = abs(x) > 1
x = (1 - abs(x) ^3) ^3
x[ind] = 0
return(x)
}
R = stack(list('uniform' = K1(x_grid),
'triangular' = K2(x_grid),
'gaussian' = K3(x_grid),
'tricube' = K4(x_grid),
'uniform' = K1(x_grid / 2) / 2,
'triangular' = K2(x_grid / 2) / 2,
'gaussian' = K3(x_grid / 2) / 2,
'tricube' = K4(x_grid / 2) / 2))
R = stack(list('uniform' = K1(x.grid),
'triangular' = K2(x.grid),
'gaussian' = K3(x.grid),
'tricube' = K4(x.grid),
'uniform' = K1(x.grid / 2) / 2,
'triangular' = K2(x.grid / 2) / 2,
'gaussian' = K3(x.grid / 2) / 2,
'tricube' = K4(x.grid / 2) / 2))
R
R
head(R)
names(R) = c('kernel.value', 'kernel.type')
R$x = x.grid
R$h[1:400] = '$h=1$'
R$h[401:800] = '$h=2$'
head(R)
qplot(x,
kernel.value,
data = R,
facets = kernel.type ̃h,
geom = "line",
xlab = "$x$",
ylab = "$K_h(x)$")
qplot(x,
kernel.value,      data = R,      facets = kernel.type ̃h,      geom = "line",      xlab = "$x ,ylab = "$K_h(x)$")
qplot(x,)
x
qplot(x, kernel.value, data = R)
qplot(x, kernel.value, data = R, facets = kernel.type ~ h)
qplot(x, kernel.value, data = R, facets = kernel.type ~ h, geom = "line'")
qplot(x, kernel.value, data = R, facets = kernel.type ~ h, geom = "line'")
qplot(x, kernel.value, data = R, facets = kernel.type ~ h, geom = "line")
qplot(x, kernel.value, data = R, facets = kernel.type ~ h, geom = "line", xlab="$x$")
library(latex2exp)
qplot(x, kernel.value, data = R, facets = kernel.type ~ h, geom = "line", xlab=TeX("$x$"))
ggplot(faithful, aes(eruptions)) + geom_density(adjust = 2)
ggplot(faithful, aes(eruptions)) + geom_density(adjust = 3)
ggplot(faithful, aes(eruptions)) + geom_density(adjust = .5)
ggplot(faithful, aes(eruptions)) + geom_density(adjust = .5, kernel = "tricube")
ggplot(faithful, aes(eruptions)) + geom_density(adjust = .5, kernel = "triangular")
ggplot(faithful, aes(eruptions)) + geom_density(adjust = .5, kernel = "rectangular")
ggplot(faithful, aes(eruptions)) + geom_density(adjust = c(.5, 1))
ggplot(faithful, waiting, eruptions) + geom_hex()
ggplot(faithful, aes(waiting, eruptions)) + geom_hex()
9.8.  SCATTER PLOTS
307
plot(mtcars$hp,
mtcars$mpg,
pch = mtcars$am,
xlab = "horsepower",
cex = 1.2)
9.8.  SCATTER PLOTS
307
plot(mtcars$hp,
mtcars$mpg,
pch = mtcars$am,
xlab = "horsepower",
cex = 5)
9.8.  SCATTER PLOTS
307
plot(mtcars$hp,
mtcars$mpg,
pch = mtcars$am,
xlab = "horsepower",
cex = 1.2)
qplot(disp,
mpg,
data = mtcars,
main = "MPG vs Eng. Displacement") +
stat_smooth(method = "loess",
method.args = list(degree = 0),
span = 0.2,
se = FALSE)
qplot(disp,
mpg,
data = mtcars,
main = "MPG vs Eng. Displacement") +
stat_smooth(method = "loess",
method.args = list(degree = 1),
span = 0.2,
se = FALSE)
qplot(disp,
mpg,
data = mtcars,
main = "MPG vs Eng. Displacement") +
stat_smooth(method = "loess",
method.args = list(degree = 0),
span = 0.2,
se = FALSE)
qplot(disp,
mpg,
data = mtcars,
main = "MPG vs Eng. Displacement") +
stat_smooth(method = "loess",
method.args = list(degree = 1),
span = 0.2,
se = FALSE)
qplot(disp,
mpg,
data = mtcars,
main = "MPG vs Eng. Displacement") +
stat_smooth(method = "loess",
method.args = list(degree = 0),
span = 0.2,
se = FALSE)
qplot(disp,
mpg,
data = mtcars,
main = "MPG vs Eng. Displacement") +
stat_smooth(method = "loess",
method.args = list(degree = 0),
span = 0.4,
se = FALSE)
qplot(disp,
mpg,
data = mtcars,
main = "MPG vs Eng. Displacement") +
stat_smooth(method = "loess",
method.args = list(degree = 0),
span = 0.1,
se = FALSE)
qplot(disp,
mpg,
data = mtcars,
main = "MPG vs Eng. Displacement") +
stat_smooth(method = "loess",
method.args = list(degree = 0),
span = 0.3,
se = FALSE)
x_grid = seq(-1, 1, length= 100)
y_grid = x_grid
R = expand.grid(x_grid, y_grid)
R
nrow(R)
head(x)
head(R)
names(R) = c("x", "y")
R$z = R$x^2 + R$y^2
head(R)
ggplot(R, aes(x,y, z = z)) + stat_contour()
ggplot(mpg, aes("",hwy)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("")
ggplot(mpg, aes("",hwy)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete()
ggplot(mpg, aes(NULL
,hwy)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete()
ggplot(mpg, aes("",hwy)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete()
ggplot(mpg, aes(y = hwy)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete()
ggplot(mpg, aes("",hwy)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete()
ggplot(mpg, aes("",hwy)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("")
reorder()
reorder(mpg, hwy)
reorder(mpg, mpg$hwy)
reorder(mpg, mpg$hwy, median)
?reorder
reorder(mpg$manufacturer, mpg$hwy, median)
ggplot(mpg, aes(reorder(class, -hwy, median), hwy)) +
geom_boxplot() +
coord_flip() +
scale_x_discrete("class")
?rnorm
?aes
?stat_qq
lm(s = 2)
df
ls()
library(ggplot2)
lm(price ~ carat, diamonds, s = 9)
p = lm(price ~ carat, diamonds)
p
predict(p, 6, s = 0)
predict(p, 6,)
predict(p, 60)
ls()
?predict
predict(p, newdata = 6)
predict(p, newdata = 6, s= 0)
predict(p, newdata = data.frame(carat = 6), s= 0)
predict(p, newdata = data.frame(carat = 6))
predict(alpha = 0)
?predict
?predict
dframe = data.frame(x = c(1,2), y = c(3,4), z = c(5,6))
dframe
dframe
dframe[[1]]
dframe[1]
typeof(dframe[1])
ggplot
library(plyr)
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(knitr)
library(reshape2)
setwd("/home/reztip/Desktop/kaggle/house_prices/source")
root = ".."
data.path  =  file.path(root, "input", "train.csv")
train.df = read.csv(data.path, header = TRUE)
house.ids = select(train.df, Id)
house.prices = select(train.df, SalePrice)
# Drop the id from training
train.df = select(train.df, -Id)
# How many variables we have for training
length(names(train.df)) - 1
nrow(train.df)
colwise(is.numeric)(train.df) %>% data.frame %>%
melt(id = "SalePrice") %>% select(variable, value)
colwise(is.numeric)(train.df) %>% unlist %>% sum
unlist(colwise(function(x) sum(is.na(x)))(train.df)) %>% sort(decreasing = T)
train.df = select(train.df, -PoolQC, -MiscFeature, -Alley, -Fence)
nas.meaningful = c("FireplaceQu", "GarageType", "GarageYrBlt", "GarageFinish",
"GarageQual", "GarageCond", "BsmtExposure", "BsmtFinType2",
"BsmtQual", "BsmtCond", "BsmtFinType1")
nas.not.meaningful = c("LotFrontage", "MasVnrType", "MasVnrArea", "Electrical")
levels(train.df["FireplaceQu"])
levels(train.df["FireplaceQu"])
str(train.df$FireplaceQu)
levels(train.df$FireplaceQu)
levels(train.df[,'FireplaceQu'])
for( var in nas.meaningful){
fact.levels = levels(train.df[, var])
mode.val = "Meaningful.NA"
train.df[var] = as.factor(train.df[var],
levels = c(fact.levels, mode.val))
train.df[is.na(train.df[var]), var] = mode.val
}
for( var in nas.meaningful){
fact.levels = levels(train.df[, var])
mode.val = "Meaningful.NA"
train.df[var] = factor(train.df[var],
levels = c(fact.levels, mode.val))
train.df[is.na(train.df[var]), var] = mode.val
}
for(var in nas.not.meaningful){
if(! is.numeric(vect)){
fact.levels = levels(train.df[, var])
mode.val = sort(table(train.df[var]), decreasing = T)[[1]]
train.df[var] = factor(train.df[var],
levels = c(fact.levels, mode.val))
train.df[is.na(train.df[var]), var] = mode.val
}
else {
mode.val = median(train.df[var], na.rm = T)
train.df[ var] = vect
}
}
for(var in nas.not.meaningful){
if(! is.numeric(train.df[, var])){
fact.levels = levels(train.df[, var])
mode.val = sort(table(train.df[var]), decreasing = T)[[1]]
train.df[var] = factor(train.df[var],
levels = c(fact.levels, mode.val))
train.df[is.na(train.df[var]), var] = mode.val
}
else {
mode.val = median(train.df[var], na.rm = T)
train.df[ var] = vect
}
}
for(var in nas.not.meaningful){
if(! is.numeric(train.df[, var])){
fact.levels = levels(train.df[, var])
mode.val = sort(table(train.df[var]), decreasing = T)[[1]]
train.df[var] = factor(train.df[var],
levels = c(fact.levels, mode.val))
train.df[is.na(train.df[var]), var] = mode.val
}
else {
mode.val = median(train.df[,var], na.rm = T)
train.df[ var] = vect
}
}
for(var in nas.not.meaningful){
if(! is.numeric(train.df[, var])){
fact.levels = levels(train.df[, var])
mode.val = sort(table(train.df[var]), decreasing = T)[[1]]
train.df[var] = factor(train.df[var],
levels = c(fact.levels, mode.val))
train.df[is.na(train.df[var]), var] = mode.val
}
else {
mode.val = median(train.df[,var], na.rm = T)
train.df[ var] = vect
}
}
for(var in nas.not.meaningful){
if(! is.numeric(train.df[, var])){
fact.levels = levels(train.df[, var])
mode.val = sort(table(train.df[var]), decreasing = T)[[1]]
train.df[var] = factor(train.df[var],
levels = c(fact.levels, mode.val))
train.df[is.na(train.df[var]), var] = mode.val
}
else {
mode.val = median(train.df[,var], na.rm = T)
train.df[ var] = vect
}
}
for(var in nas.not.meaningful){
if(! is.numeric(train.df[, var])){
fact.levels = levels(train.df[, var])
mode.val = sort(table(train.df[var]), decreasing = T)[[1]]
train.df[var] = factor(train.df[var],
levels = c(fact.levels, mode.val))
train.df[is.na(train.df[var]), var] = mode.val
}
else {
mode.val = median(train.df[,var], na.rm = T)
train.df[ var] = vect
}
}
for(var in nas.not.meaningful){
if(! is.numeric(train.df[, var])){
fact.levels = levels(train.df[, var])
mode.val = sort(table(train.df[var]), decreasing = T)[[1]]
train.df[var] = factor(train.df[var],
levels = c(fact.levels, mode.val))
}
else {
mode.val = median(train.df[,var], na.rm = T)
}
train.df[is.na(train.df[var]), var] = mode.val
}
lm(SalePrice ~ ., train.df)
ggplot(train.df,
aes(SalePrice, y = ..density.., fill = I("floralwhite"))) +
geom_histogram(bins = 30, color = 'black') +
scale_x_continuous(labels = scales::dollar_format()) +
labs(title = "Distribution of Home Selling Prices")
system("terminal")
system("term")
system("gnome-terminal")
lm(SalePrice ~ ., data = train.df)
str(train.df)
train.df$MSSubClass = as.factor(train.df$MSSubClass)
train.df$OverallQual = as.factor(train.df$OverallQual)
train.df$OverallCond = as.factor(train.df$OverallCond)
train.df$GarageYrBlt = NULL
train.df = na.omit(train.df)
lm(SalePrice ~ ., data = train.df)
str(train.df)
lm(SalePrice ~ ., data = train.df)
colwise(is.factor)(train.df)
colwise(is.factor)(train.df) %>% names
nam = colwise(is.factor)(train.df) %>% names
nam
nam = colwise(is.factor)(train.df) %>% names
names(train.df)[True]
names(train.df)[TRUE
]
nam = names(train.df)(colwise(is.factor)(train.df)) %>% names
nam = names(train.df)[(colwise(is.factor)(train.df))] %>% names
nam = names(train.df)[(colwise(is.factor)(train.df)) %>% unlist] %>% names
nam
(colwise(is.factor)(train.df)) %>% unlist
nam = names(train.df)[(colwise(is.factor)(train.df))]
nam = (colwise(is.factor)(train.df))
nam
names(train.df)[nam]
names(train.df)[unlist(nam)]
nv = names(train.df)[unlist(nam)]
nv
for(n)
n
nm
for (nm in nv){}
for (nm in nv){print(length(levels(train.df[, nm])))  }
x
numerics = (colwise(is.numeric)(train.df))
numerics = names(train.df)[numerics]
numerics = names(train.df)[unlist(numerics)]
numerics
str(train.df[, numerics])
summary(train.df[, numerics])
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(knitr)
library(reshape2)
setwd("/home/reztip/Desktop/kaggle/house_prices/source")
root = ".."
data.path  =  file.path(root, "input", "train.csv")
train.df = read.csv(data.path, header = TRUE)
house.ids = select(train.df, Id)
house.prices = select(train.df, SalePrice)
# Drop the id from training
train.df = select(train.df, -Id)
# How many variables we have for training
length(names(train.df)) - 1
nrow(train.df)
colwise(is.numeric)(train.df) %>% data.frame %>%
melt(id = "SalePrice") %>% select(variable, value)
colwise(is.numeric)(train.df) %>% unlist %>% sum
unlist(colwise(function(x) sum(is.na(x)))(train.df)) %>% sort(decreasing = T)
train.df = select(train.df, -PoolQC, -MiscFeature, -Alley, -Fence)
nas.meaningful = c("FireplaceQu", "GarageType", "GarageYrBlt", "GarageFinish",
"GarageQual", "GarageCond", "BsmtExposure", "BsmtFinType2",
"BsmtQual", "BsmtCond", "BsmtFinType1")
nas.not.meaningful = c("LotFrontage", "MasVnrType", "MasVnrArea", "Electrical")
for( var in nas.meaningful){
fact.levels = levels(train.df[, var])
mode.val = "Meaningful.NA"
train.df[var] = factor(train.df[var],
levels = c(fact.levels, mode.val))
train.df[is.na(train.df[var]), var] = mode.val
}
for(var in nas.not.meaningful){
if(! is.numeric(train.df[, var])){
fact.levels = levels(train.df[, var])
mode.val = sort(table(train.df[var]), decreasing = T)[[1]]
train.df[var] = factor(train.df[var],
levels = c(fact.levels, mode.val))
}
else {
mode.val = median(train.df[,var], na.rm = T)
}
train.df[is.na(train.df[var]), var] = mode.val
}
train.df$MSSubClass = as.factor(train.df$MSSubClass)
train.df$OverallQual = as.factor(train.df$OverallQual)
train.df$OverallCond = as.factor(train.df$OverallCond)
train.df$GarageYrBlt = NULL
train.df = na.omit(train.df)
ggplot(train.df,
aes(SalePrice, y = ..density.., fill = I("floralwhite"))) +
geom_histogram(bins = 30, color = 'black') +
scale_x_continuous(labels = scales::dollar_format()) +
labs(title = "Distribution of Home Selling Prices")
ggplot(train.df,
aes(SalePrice, y = ..density.., fill = I("floralwhite"))) +
geom_histogram(bins = 30, color = 'black') +
scale_x_log10(labels = scales::dollar_format(),
breaks = c(.5E5, 1E5, 2E5, 5E5)) +
labs(title = "Distribution of Home Selling Prices (Log-Scaled)")
lm(SalePrice ~ ., data = train.df)
str(train.df)
sapply(train.df, uniq)
sapply(train.df, unique)
sapply(train.df, function(x) length(unique(x)))
uniq.table = sapply(train.df, function(x) length(unique(x))) %>%
sort(descending = TRUE)
uniq.table = sapply(train.df, function(x) length(unique(x))) %>%
sort(decreasing = TRUE)
uniq.table
uniq.table[uniq.table == 1]
uniq.table[uniq.table == 1] %>% names
train.df[, 'asdfasdf'] = NULL
# Remove bad names
uniq.table = sapply(train.df, function(x) length(unique(x))) %>%
sort(decreasing = TRUE)
bad.names = uniq.table[uniq.table == 1] %>% names
# Remove bad names
for(bn in bad.names) {
train.df[, bn] = NULL
}
lm(SalePrice ~ ., data = train.df)
